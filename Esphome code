#work in progress still, jsut wanted to share my take on it!
esphome:
  name: esphome-web-cec8ec
  friendly_name: ctc

esp32:
  board: esp32dev
  framework:
    type: arduino
#this is optional, but nice to have
web_server:
  port: 80

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ""
ota:
Set to your own
wifi:
  ssid: "xxx"
  password: "xxxxxxxxx"
# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-064D30"
    password: "topsecret"

uart:
  id: mod_bus
  tx_pin: 17
  rx_pin: 16
  baud_rate: 9600
  parity: EVEN
  stop_bits: 1

modbus:
 flow_control_pin: 5
 id: modbus1

modbus_controller:
  - id: epever
    ## the Modbus device addr
    address: 0x1
    modbus_id: modbus1
    setup_priority: -10

sensor:
    - platform: modbus_controller
      modbus_controller_id: epever
      register_type: read
      name: "Faktisk inomhustemperatur"
      id: inomhus_temp
      accuracy_decimals: 1
      address: 0x0261
      unit_of_measurement: "°C"
      device_class: "temperature"
      state_class: "measurement"
      value_type: S_WORD
      filters:
      - multiply: 0.1

    - platform: modbus_controller
      modbus_controller_id: epever
      name: "Utetemperatur"
      id: utomhus_temp
      register_type: read
      address: 0x025E
      unit_of_measurement: "°C"
      device_class: "temperature"
      state_class: "measurement"
      accuracy_decimals: 1
      value_type: S_WORD
      filters:
        - multiply: 0.1
  
    - platform: modbus_controller
      modbus_controller_id: epever
      name: "Övre tank, temperatur"
      id: upper_tank_temp
      register_type: read
      address: 0x0259
      unit_of_measurement: "°C"
      device_class: "temperature"
      state_class: "measurement"
      accuracy_decimals: 2
      value_type: S_WORD
      filters:
        - multiply: 0.1
    - platform: modbus_controller
      modbus_controller_id: epever
      name: "Lägre tank, temperatur"
      id: lower_tank_temp
      register_type: read
      address: 0x025B
      unit_of_measurement: "°C"
      device_class: "temperature"
      state_class: "measurement"
      accuracy_decimals: 2
      value_type: S_WORD
      filters:
        - multiply: 0.1
  
    - platform: modbus_controller
      modbus_controller_id: epever
      name: "VP ut"
      id: con_out
      register_type: read
      address: 0x027A
      unit_of_measurement: "°C"
      device_class: "temperature"
      state_class: "measurement"
      accuracy_decimals: 2
      value_type: S_WORD
      filters:
        - multiply: 0.1

    - platform: modbus_controller
      modbus_controller_id: epever
      name: "VP in"
      id: con_in
      register_type: read
      address: 0x0278
      unit_of_measurement: "°C"
      device_class: "temperature"
      state_class: "measurement"
      accuracy_decimals: 2
      value_type: S_WORD
      filters:
      - multiply: 0.1

    - platform: modbus_controller
      modbus_controller_id: epever
      name: "Laddpump"
      id: ladd_pump
      register_type: read
      address: 0x0288
      ##address: 0x00CE
      unit_of_measurement: "%"
      accuracy_decimals: 2
      value_type: U_WORD
      filters:
      - multiply: 0.1

    - platform: modbus_controller
      modbus_controller_id: epever
      name: "Extra varmvatten, satt väre"
      id: ex_tid
      register_type: read
      address: 0x00CE
      ##address: 0x00CE
      unit_of_measurement: "h"
      accuracy_decimals: 1
      value_type: U_WORD
      filters:
      - multiply: 0.5

    - platform: modbus_controller
      modbus_controller_id: epever
      register_type: read
      name: "Värme framledning"
      id: heating_cir1
      accuracy_decimals: 2
      address: 0x0000027A
      unit_of_measurement: "°C"
      device_class: "temperature"
      state_class: "measurement"
      value_type: S_WORD
      filters:
      - multiply: 0.1

    - platform: modbus_controller
      modbus_controller_id: epever
      register_type: read
      name: "Värme retur"
      id: heating_cir2
      accuracy_decimals: 2
      address: 0x0000025F
      unit_of_measurement: "°C"
      device_class: "temperature"
      state_class: "measurement"
      value_type: S_WORD
      filters:
      - multiply: 0.1

    - platform: modbus_controller
      modbus_controller_id: epever
      register_type: read
      name: "Satt inomhustemperatur"
      id: temp_satt
      accuracy_decimals: 2
      address: 0x00CB
      unit_of_measurement: "°C"
      device_class: "temperature"
      state_class: "measurement"
      value_type: S_WORD
      filters:
      - multiply: 0.1

select:
  - platform: modbus_controller
    name: "Varmvatten Läge"
    id: heating_mode
    modbus_controller_id: epever
    address: 0x00CF
    value_type: S_WORD
    optionsmap:
      "Ekonomi": 0
      "Normal": 1
      "Komfort": 2

number:
  - platform: modbus_controller
    modbus_controller_id: epever
    id: extra_varm_vatten
    name: "Extra varmvatten timer"
    address: 0x000000CE
    value_type: U_WORD
    min_value: 0
    max_value: 20
    step: 0.5
    mode: box
    lambda: "return  x * .5; "
    write_lambda: |-
      esphome::modbus_controller::ModbusController *controller = id(epever);
      std::vector<uint16_t> hotwater_data = {uint16_t((x))};
      esphome::modbus_controller::ModbusCommandItem set_hotwater_command = esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x00DB, 0x0001, hotwater_data);
      controller->queue_command(set_hotwater_command);
      return x * 2 ;
    ## multiply is ignored because lamdba is used
    #multiply: 1.0
